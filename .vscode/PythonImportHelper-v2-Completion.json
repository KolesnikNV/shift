[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "shift.db.models",
        "description": "shift.db.models",
        "isExtraImport": true,
        "detail": "shift.db.models",
        "documentation": {}
    },
    {
        "label": "UserDAL",
        "importPath": "db.dals",
        "description": "db.dals",
        "isExtraImport": true,
        "detail": "db.dals",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "db.session",
        "description": "db.session",
        "isExtraImport": true,
        "detail": "db.session",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "db.models",
        "description": "db.models",
        "isExtraImport": true,
        "detail": "db.models",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "shift.settings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shift.settings",
        "description": "shift.settings",
        "detail": "shift.settings",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "user_router",
        "importPath": "api.hadlers",
        "description": "api.hadlers",
        "isExtraImport": true,
        "detail": "api.hadlers",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi.routing",
        "description": "fastapi.routing",
        "isExtraImport": true,
        "detail": "fastapi.routing",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "envparse",
        "description": "envparse",
        "isExtraImport": true,
        "detail": "envparse",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.bin.activate_this",
        "description": ".venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\nfrom shift.db.models import Base\ntarget_metadata = Base.metadata\n# target_metadata = None",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\n# target_metadata = None\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "user_router",
        "kind": 5,
        "importPath": "shift.api.hadlers",
        "description": "shift.api.hadlers",
        "peekOfCode": "user_router = APIRouter()\nasync def _create_new_user(body: UserCreate, db) -> ShowUser:\n    async with db as session:\n        async with session.begin():\n            user_dal = UserDAL(session)\n            user = await user_dal.create_user(\n                name=body.name,\n                surname=body.surname,\n                email=body.email,\n                salary=body.salary,",
        "detail": "shift.api.hadlers",
        "documentation": {}
    },
    {
        "label": "TunedModel",
        "kind": 6,
        "importPath": "shift.api.models",
        "description": "shift.api.models",
        "peekOfCode": "class TunedModel(BaseModel):\n    class Config:\n        \"\"\"tells pydantic to convert even non dict obj to json\"\"\"\n        orm_mode = True\nclass ShowUser(TunedModel):\n    user_id: uuid.UUID\n    name: str\n    surname: str\n    email: EmailStr\n    is_active: bool",
        "detail": "shift.api.models",
        "documentation": {}
    },
    {
        "label": "ShowUser",
        "kind": 6,
        "importPath": "shift.api.models",
        "description": "shift.api.models",
        "peekOfCode": "class ShowUser(TunedModel):\n    user_id: uuid.UUID\n    name: str\n    surname: str\n    email: EmailStr\n    is_active: bool\n    salary: float\n    salary_increase_date: str\nclass UserCreate(BaseModel):\n    name: str",
        "detail": "shift.api.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "shift.api.models",
        "description": "shift.api.models",
        "peekOfCode": "class UserCreate(BaseModel):\n    name: str\n    surname: str\n    email: EmailStr\n    salary: float\n    salary_increase_date: str\n    @validator(\"name\")\n    def validate_name(cls, value):\n        if not LETTER_MATCH_PATTERN.match(value):\n            raise HTTPException(",
        "detail": "shift.api.models",
        "documentation": {}
    },
    {
        "label": "LETTER_MATCH_PATTERN",
        "kind": 5,
        "importPath": "shift.api.models",
        "description": "shift.api.models",
        "peekOfCode": "LETTER_MATCH_PATTERN = re.compile(r\"^[а-яА-Яa-zA-Z\\-]+$\")\nclass TunedModel(BaseModel):\n    class Config:\n        \"\"\"tells pydantic to convert even non dict obj to json\"\"\"\n        orm_mode = True\nclass ShowUser(TunedModel):\n    user_id: uuid.UUID\n    name: str\n    surname: str\n    email: EmailStr",
        "detail": "shift.api.models",
        "documentation": {}
    },
    {
        "label": "UserDAL",
        "kind": 6,
        "importPath": "shift.db.dals",
        "description": "shift.db.dals",
        "peekOfCode": "class UserDAL:\n    \"\"\"Data Access Layer for operating user info\"\"\"\n    def __init__(self, db_session: AsyncSession):\n        self.db_session = db_session\n    async def create_user(\n        self,\n        name: str,\n        surname: str,\n        email: str,\n        salary: float,",
        "detail": "shift.db.dals",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "shift.db.models",
        "description": "shift.db.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"Users\"\n    user_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    name = Column(String, nullable=False)\n    surname = Column(String, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    is_active = Column(Boolean(), default=True)\n    salary = Column(Float, nullable=False)\n    next_salary_up = Column(String, nullable=False)",
        "detail": "shift.db.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "shift.db.models",
        "description": "shift.db.models",
        "peekOfCode": "Base = declarative_base()\nclass User(Base):\n    __tablename__ = \"Users\"\n    user_id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)\n    name = Column(String, nullable=False)\n    surname = Column(String, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    is_active = Column(Boolean(), default=True)\n    salary = Column(Float, nullable=False)\n    next_salary_up = Column(String, nullable=False)",
        "detail": "shift.db.models",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "shift.db.session",
        "description": "shift.db.session",
        "peekOfCode": "engine = create_async_engine(settings.REAL_DATABASE_URL, future=True, echo=True)\nasync_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)\nasync def get_db() -> Generator:\n    try:\n        session: AsyncSession = async_session()\n        yield session\n    finally:\n        await session.close()",
        "detail": "shift.db.session",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "shift.db.session",
        "description": "shift.db.session",
        "peekOfCode": "async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)\nasync def get_db() -> Generator:\n    try:\n        session: AsyncSession = async_session()\n        yield session\n    finally:\n        await session.close()",
        "detail": "shift.db.session",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "shift.main",
        "description": "shift.main",
        "peekOfCode": "app = FastAPI(title=\"shift\")\nmain_api_router = APIRouter()\nmain_api_router.include_router(user_router, tags=[\"user\"])\napp.include_router(main_api_router)\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)",
        "detail": "shift.main",
        "documentation": {}
    },
    {
        "label": "main_api_router",
        "kind": 5,
        "importPath": "shift.main",
        "description": "shift.main",
        "peekOfCode": "main_api_router = APIRouter()\nmain_api_router.include_router(user_router, tags=[\"user\"])\napp.include_router(main_api_router)\nif __name__ == \"__main__\":\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)",
        "detail": "shift.main",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "shift.settings",
        "description": "shift.settings",
        "peekOfCode": "env = Env()\nREAL_DATABASE_URL = env.str(\n    \"REAL_DATABASE_URL\",\n    default=\"postgresql+asyncpg://postgres:postgres@0.0.0.0:5432/postgres\",\n)\nAPP_PORT = env.int(\"APP_PORT\")\nSECRET_KEY: str = env.str(\"SECRET_KEY\", default=\"secret_key\")\nALGORITHM: str = env.str(\"ALGORITHM\", default=\"HS256\")\nACCESS_TOKEN_EXPIRE_MINUTES: int = env.int(\"ACCESS_TOKEN_EXPIRE_MINUTES\", default=30)\nSENTRY_URL: str = env.str(\"SENTRY_URL\")",
        "detail": "shift.settings",
        "documentation": {}
    },
    {
        "label": "REAL_DATABASE_URL",
        "kind": 5,
        "importPath": "shift.settings",
        "description": "shift.settings",
        "peekOfCode": "REAL_DATABASE_URL = env.str(\n    \"REAL_DATABASE_URL\",\n    default=\"postgresql+asyncpg://postgres:postgres@0.0.0.0:5432/postgres\",\n)\nAPP_PORT = env.int(\"APP_PORT\")\nSECRET_KEY: str = env.str(\"SECRET_KEY\", default=\"secret_key\")\nALGORITHM: str = env.str(\"ALGORITHM\", default=\"HS256\")\nACCESS_TOKEN_EXPIRE_MINUTES: int = env.int(\"ACCESS_TOKEN_EXPIRE_MINUTES\", default=30)\nSENTRY_URL: str = env.str(\"SENTRY_URL\")\nTEST_DATABASE_URL = env.str(",
        "detail": "shift.settings",
        "documentation": {}
    },
    {
        "label": "APP_PORT",
        "kind": 5,
        "importPath": "shift.settings",
        "description": "shift.settings",
        "peekOfCode": "APP_PORT = env.int(\"APP_PORT\")\nSECRET_KEY: str = env.str(\"SECRET_KEY\", default=\"secret_key\")\nALGORITHM: str = env.str(\"ALGORITHM\", default=\"HS256\")\nACCESS_TOKEN_EXPIRE_MINUTES: int = env.int(\"ACCESS_TOKEN_EXPIRE_MINUTES\", default=30)\nSENTRY_URL: str = env.str(\"SENTRY_URL\")\nTEST_DATABASE_URL = env.str(\n    \"TEST_DATABASE_URL\",\n    default=\"postgresql+asyncpg://postgres_test:postgres_test@0.0.0.0:5433/postgres_test\",\n)",
        "detail": "shift.settings",
        "documentation": {}
    },
    {
        "label": "TEST_DATABASE_URL",
        "kind": 5,
        "importPath": "shift.settings",
        "description": "shift.settings",
        "peekOfCode": "TEST_DATABASE_URL = env.str(\n    \"TEST_DATABASE_URL\",\n    default=\"postgresql+asyncpg://postgres_test:postgres_test@0.0.0.0:5433/postgres_test\",\n)",
        "detail": "shift.settings",
        "documentation": {}
    }
]